/**
 * generated by Xtext 2.26.0
 */
package kcl.uk.dzh.zpl.generator;

import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class RunningManGenerator {
  public RunningManGenerator(final RunningManGenerator mpp) {
  }
  
  public CharSequence generateFrame() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package run;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.awt.Graphics;");
    _builder.newLine();
    _builder.append("import java.awt.Image;");
    _builder.newLine();
    _builder.append("import java.util.Random;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.swing.JPanel;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class RunningMan extends Thread{");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int x_point, y_point;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Image image;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static Random random = new Random();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//用来保存准备状态图片的变量");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Image img_ready;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//第一名");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static RunningMan NO1;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//用来判断是否产生第一名");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static boolean isEnd = false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//终止线程的布尔值");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static boolean canRun = true;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static int num;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("GameJFrame gj;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public RunningMan(String name, int x_point, int y_point, Image image, GameJFrame gj) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.name = name;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.x_point = x_point;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.y_point = y_point;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.image = image;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("img_ready = image;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.gj = gj;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void drawSelf(Graphics graphic, JPanel jp){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("graphic.drawImage(image, x_point, y_point, jp);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//跑动的方法");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void move(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("x_point += random.nextInt(10);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void run() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("while(x_point < 950 && canRun){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("Thread.sleep(50);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} catch (InterruptedException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("move();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(canRun){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("x_point = 950;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("image = img_ready;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("synchronized (random) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(canRun){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("num++;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(!isEnd && canRun){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("NO1 = this;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("isEnd = true;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(num == 4){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("System.out.println(\"本次大赛的第一名是: \" +NO1.name);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("//所有人跑完了，计算钱数");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("new GetResult(gj).setMoney();;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
