/*
 * generated by Xtext 2.26.0
 */
package kcl.uk.dzh.zpl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RaceGameGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class RaceGameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.uk.dzh.zpl.RaceGame.RaceGame");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariableVariableDeclarationParserRuleCall_3_0 = (RuleCall)cVariableAssignment_3.eContents().get(0);
		private final Assignment cScreenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cScreenScreenSpecificationParserRuleCall_4_0 = (RuleCall)cScreenAssignment_4.eContents().get(0);
		private final Assignment cFieldsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFieldsFieldSpecificationParserRuleCall_5_0 = (RuleCall)cFieldsAssignment_5.eContents().get(0);
		private final Assignment cOptionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOptionsOptionSpecificationParserRuleCall_6_0 = (RuleCall)cOptionsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//RaceGame :
		//    "game" name=ID "{"
		//        variable +=VariableDeclaration?
		//        screen = ScreenSpecification
		//        fields += FieldSpecification+
		//        options += OptionSpecification+
		//    "}"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"game" name=ID "{"
		//    variable +=VariableDeclaration?
		//    screen = ScreenSpecification
		//    fields += FieldSpecification+
		//    options += OptionSpecification+
		//"}"
		public Group getGroup() { return cGroup; }
		
		//"game"
		public Keyword getGameKeyword_0() { return cGameKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//variable +=VariableDeclaration?
		public Assignment getVariableAssignment_3() { return cVariableAssignment_3; }
		
		//VariableDeclaration
		public RuleCall getVariableVariableDeclarationParserRuleCall_3_0() { return cVariableVariableDeclarationParserRuleCall_3_0; }
		
		//screen = ScreenSpecification
		public Assignment getScreenAssignment_4() { return cScreenAssignment_4; }
		
		//ScreenSpecification
		public RuleCall getScreenScreenSpecificationParserRuleCall_4_0() { return cScreenScreenSpecificationParserRuleCall_4_0; }
		
		//fields += FieldSpecification+
		public Assignment getFieldsAssignment_5() { return cFieldsAssignment_5; }
		
		//FieldSpecification
		public RuleCall getFieldsFieldSpecificationParserRuleCall_5_0() { return cFieldsFieldSpecificationParserRuleCall_5_0; }
		
		//options += OptionSpecification+
		public Assignment getOptionsAssignment_6() { return cOptionsAssignment_6; }
		
		//OptionSpecification
		public RuleCall getOptionsOptionSpecificationParserRuleCall_6_0() { return cOptionsOptionSpecificationParserRuleCall_6_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.uk.dzh.zpl.RaceGame.VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueINTTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//VariableDeclaration:
		//    "var" name=ID "=" value=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"var" name=ID "=" value=INT
		public Group getGroup() { return cGroup; }
		
		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=INT
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_3_0() { return cValueINTTerminalRuleCall_3_0; }
	}
	public class EndGameBehaviourElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.uk.dzh.zpl.RaceGame.EndGameBehaviour");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEndGameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWinAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWinSTRINGTerminalRuleCall_2_0 = (RuleCall)cWinAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLostAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLostSTRINGTerminalRuleCall_4_0 = (RuleCall)cLostAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//EndGameBehaviour :
		//    "end-game" "(" win=STRING "," lost=STRING ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"end-game" "(" win=STRING "," lost=STRING ")"
		public Group getGroup() { return cGroup; }
		
		//"end-game"
		public Keyword getEndGameKeyword_0() { return cEndGameKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//win=STRING
		public Assignment getWinAssignment_2() { return cWinAssignment_2; }
		
		//STRING
		public RuleCall getWinSTRINGTerminalRuleCall_2_0() { return cWinSTRINGTerminalRuleCall_2_0; }
		
		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//lost=STRING
		public Assignment getLostAssignment_4() { return cLostAssignment_4; }
		
		//STRING
		public RuleCall getLostSTRINGTerminalRuleCall_4_0() { return cLostSTRINGTerminalRuleCall_4_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ScreenSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.uk.dzh.zpl.RaceGame.ScreenSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScreenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cWidthKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cScreenWidthAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cScreenWidthINTTerminalRuleCall_5_0 = (RuleCall)cScreenWidthAssignment_5.eContents().get(0);
		private final Keyword cHeightKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cScreenHeightAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cScreenHeightINTTerminalRuleCall_8_0 = (RuleCall)cScreenHeightAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//ScreenSpecification :
		//    "screen" name=ID "{"
		//        "Width" "=" screenWidth = INT
		//        "Height" "=" screenHeight= INT
		//    "}"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"screen" name=ID "{"
		//    "Width" "=" screenWidth = INT
		//    "Height" "=" screenHeight= INT
		//"}"
		public Group getGroup() { return cGroup; }
		
		//"screen"
		public Keyword getScreenKeyword_0() { return cScreenKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//"Width"
		public Keyword getWidthKeyword_3() { return cWidthKeyword_3; }
		
		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//screenWidth = INT
		public Assignment getScreenWidthAssignment_5() { return cScreenWidthAssignment_5; }
		
		//INT
		public RuleCall getScreenWidthINTTerminalRuleCall_5_0() { return cScreenWidthINTTerminalRuleCall_5_0; }
		
		//"Height"
		public Keyword getHeightKeyword_6() { return cHeightKeyword_6; }
		
		//"="
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//screenHeight= INT
		public Assignment getScreenHeightAssignment_8() { return cScreenHeightAssignment_8; }
		
		//INT
		public RuleCall getScreenHeightINTTerminalRuleCall_8_0() { return cScreenHeightINTTerminalRuleCall_8_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class ObstaclepecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.uk.dzh.zpl.RaceGame.Obstaclepecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObstacleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFieldsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldsObstacleMemberParserRuleCall_3_0 = (RuleCall)cFieldsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Obstaclepecification:
		//     "obstacle" name=ID "{"
		//         fields += ObstacleMember*
		//     "}"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"obstacle" name=ID "{"
		//    fields += ObstacleMember*
		//"}"
		public Group getGroup() { return cGroup; }
		
		//"obstacle"
		public Keyword getObstacleKeyword_0() { return cObstacleKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//fields += ObstacleMember*
		public Assignment getFieldsAssignment_3() { return cFieldsAssignment_3; }
		
		//ObstacleMember
		public RuleCall getFieldsObstacleMemberParserRuleCall_3_0() { return cFieldsObstacleMemberParserRuleCall_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ObstacleMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.uk.dzh.zpl.RaceGame.ObstacleMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWallObstacleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWaterObstacleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ObstacleMember:
		//    WallObstacle|
		//    WaterObstacle
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//WallObstacle|
		//WaterObstacle
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WallObstacle
		public RuleCall getWallObstacleParserRuleCall_0() { return cWallObstacleParserRuleCall_0; }
		
		//WaterObstacle
		public RuleCall getWaterObstacleParserRuleCall_1() { return cWaterObstacleParserRuleCall_1; }
	}
	public class WaterObstacleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.uk.dzh.zpl.RaceGame.WaterObstacle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWaterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//WaterObstacle:
		//    "water" name=ID "{"
		//    "}"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"water" name=ID "{"
		//"}"
		public Group getGroup() { return cGroup; }
		
		//"water"
		public Keyword getWaterKeyword_0() { return cWaterKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class WallObstacleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.uk.dzh.zpl.RaceGame.WallObstacle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSpaceWidthKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cWallWidthAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cWallWidthINTTerminalRuleCall_5_0 = (RuleCall)cWallWidthAssignment_5.eContents().get(0);
		private final Keyword cSpaceHeightKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cWallHeightAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cWallHeightINTTerminalRuleCall_8_0 = (RuleCall)cWallHeightAssignment_8.eContents().get(0);
		private final Keyword cSpacePosXKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cEqualsSignKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cWallPosXAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cWallPosXINTTerminalRuleCall_11_0 = (RuleCall)cWallPosXAssignment_11.eContents().get(0);
		private final Keyword cSpacePosYKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cEqualsSignKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cWallPosYAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cWallPosYINTTerminalRuleCall_14_0 = (RuleCall)cWallPosYAssignment_14.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_15 = (Keyword)cGroup.eContents().get(15);
		
		//WallObstacle:
		//    "space" name=ID "{"
		//        "spaceWidth" "=" wallWidth=INT
		//        "spaceHeight" "=" wallHeight=INT
		//        "spacePosX" "=" wallPosX=INT
		//        "spacePosY" "=" wallPosY=INT
		//    "}"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"space" name=ID "{"
		//    "spaceWidth" "=" wallWidth=INT
		//    "spaceHeight" "=" wallHeight=INT
		//    "spacePosX" "=" wallPosX=INT
		//    "spacePosY" "=" wallPosY=INT
		//"}"
		public Group getGroup() { return cGroup; }
		
		//"space"
		public Keyword getSpaceKeyword_0() { return cSpaceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//"spaceWidth"
		public Keyword getSpaceWidthKeyword_3() { return cSpaceWidthKeyword_3; }
		
		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//wallWidth=INT
		public Assignment getWallWidthAssignment_5() { return cWallWidthAssignment_5; }
		
		//INT
		public RuleCall getWallWidthINTTerminalRuleCall_5_0() { return cWallWidthINTTerminalRuleCall_5_0; }
		
		//"spaceHeight"
		public Keyword getSpaceHeightKeyword_6() { return cSpaceHeightKeyword_6; }
		
		//"="
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//wallHeight=INT
		public Assignment getWallHeightAssignment_8() { return cWallHeightAssignment_8; }
		
		//INT
		public RuleCall getWallHeightINTTerminalRuleCall_8_0() { return cWallHeightINTTerminalRuleCall_8_0; }
		
		//"spacePosX"
		public Keyword getSpacePosXKeyword_9() { return cSpacePosXKeyword_9; }
		
		//"="
		public Keyword getEqualsSignKeyword_10() { return cEqualsSignKeyword_10; }
		
		//wallPosX=INT
		public Assignment getWallPosXAssignment_11() { return cWallPosXAssignment_11; }
		
		//INT
		public RuleCall getWallPosXINTTerminalRuleCall_11_0() { return cWallPosXINTTerminalRuleCall_11_0; }
		
		//"spacePosY"
		public Keyword getSpacePosYKeyword_12() { return cSpacePosYKeyword_12; }
		
		//"="
		public Keyword getEqualsSignKeyword_13() { return cEqualsSignKeyword_13; }
		
		//wallPosY=INT
		public Assignment getWallPosYAssignment_14() { return cWallPosYAssignment_14; }
		
		//INT
		public RuleCall getWallPosYINTTerminalRuleCall_14_0() { return cWallPosYINTTerminalRuleCall_14_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_15() { return cRightCurlyBracketKeyword_15; }
	}
	public class FieldSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.uk.dzh.zpl.RaceGame.FieldSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEnemyCountKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cEnemyCountAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEnemyCountAdditionParserRuleCall_5_0 = (RuleCall)cEnemyCountAssignment_5.eContents().get(0);
		private final Assignment cObstacleAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cObstacleObstaclepecificationParserRuleCall_6_0 = (RuleCall)cObstacleAssignment_6.eContents().get(0);
		private final Keyword cNextLevelKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cGotoKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cNextLevelAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cNextLevelFieldSpecificationCrossReference_9_0 = (CrossReference)cNextLevelAssignment_9.eContents().get(0);
		private final RuleCall cNextLevelFieldSpecificationIDTerminalRuleCall_9_0_1 = (RuleCall)cNextLevelFieldSpecificationCrossReference_9_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//FieldSpecification :
		//    "field" name=ID "{"
		//        "enemyCount" "=" enemyCount=Addition
		//         obstacle = Obstaclepecification
		//         "nextLevel" "goto"  nextLevel = [FieldSpecification]
		//    "}"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"field" name=ID "{"
		//    "enemyCount" "=" enemyCount=Addition
		//     obstacle = Obstaclepecification
		//     "nextLevel" "goto"  nextLevel = [FieldSpecification]
		//"}"
		public Group getGroup() { return cGroup; }
		
		//"field"
		public Keyword getFieldKeyword_0() { return cFieldKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//"enemyCount"
		public Keyword getEnemyCountKeyword_3() { return cEnemyCountKeyword_3; }
		
		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//enemyCount=Addition
		public Assignment getEnemyCountAssignment_5() { return cEnemyCountAssignment_5; }
		
		//Addition
		public RuleCall getEnemyCountAdditionParserRuleCall_5_0() { return cEnemyCountAdditionParserRuleCall_5_0; }
		
		//obstacle = Obstaclepecification
		public Assignment getObstacleAssignment_6() { return cObstacleAssignment_6; }
		
		//Obstaclepecification
		public RuleCall getObstacleObstaclepecificationParserRuleCall_6_0() { return cObstacleObstaclepecificationParserRuleCall_6_0; }
		
		//"nextLevel"
		public Keyword getNextLevelKeyword_7() { return cNextLevelKeyword_7; }
		
		//"goto"
		public Keyword getGotoKeyword_8() { return cGotoKeyword_8; }
		
		//nextLevel = [FieldSpecification]
		public Assignment getNextLevelAssignment_9() { return cNextLevelAssignment_9; }
		
		//[FieldSpecification]
		public CrossReference getNextLevelFieldSpecificationCrossReference_9_0() { return cNextLevelFieldSpecificationCrossReference_9_0; }
		
		//ID
		public RuleCall getNextLevelFieldSpecificationIDTerminalRuleCall_9_0_1() { return cNextLevelFieldSpecificationIDTerminalRuleCall_9_0_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class OptionSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.uk.dzh.zpl.RaceGame.OptionSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStartFieldDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAllowRestartMenuParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSuperModeDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEndGameBehaviourParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//OptionSpecification :
		//    StartFieldDeclaration |
		//    AllowRestartMenu|
		//    SuperModeDeclaration |
		//    EndGameBehaviour
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//StartFieldDeclaration |
		//AllowRestartMenu|
		//SuperModeDeclaration |
		//EndGameBehaviour
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StartFieldDeclaration
		public RuleCall getStartFieldDeclarationParserRuleCall_0() { return cStartFieldDeclarationParserRuleCall_0; }
		
		//AllowRestartMenu
		public RuleCall getAllowRestartMenuParserRuleCall_1() { return cAllowRestartMenuParserRuleCall_1; }
		
		//SuperModeDeclaration
		public RuleCall getSuperModeDeclarationParserRuleCall_2() { return cSuperModeDeclarationParserRuleCall_2; }
		
		//EndGameBehaviour
		public RuleCall getEndGameBehaviourParserRuleCall_3() { return cEndGameBehaviourParserRuleCall_3; }
	}
	public class SuperModeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.uk.dzh.zpl.RaceGame.SuperModeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSuperModeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cSuperModeDeclarationAction_1 = (Action)cGroup.eContents().get(1);
		
		//SuperModeDeclaration:
		//    "superMode" {SuperModeDeclaration}
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"superMode" {SuperModeDeclaration}
		public Group getGroup() { return cGroup; }
		
		//"superMode"
		public Keyword getSuperModeKeyword_0() { return cSuperModeKeyword_0; }
		
		//{SuperModeDeclaration}
		public Action getSuperModeDeclarationAction_1() { return cSuperModeDeclarationAction_1; }
	}
	public class StartFieldDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.uk.dzh.zpl.RaceGame.StartFieldDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFieldAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFieldFieldSpecificationCrossReference_2_0 = (CrossReference)cFieldAssignment_2.eContents().get(0);
		private final RuleCall cFieldFieldSpecificationIDTerminalRuleCall_2_0_1 = (RuleCall)cFieldFieldSpecificationCrossReference_2_0.eContents().get(1);
		
		//StartFieldDeclaration:
		//    "start" "=" field = [FieldSpecification]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"start" "=" field = [FieldSpecification]
		public Group getGroup() { return cGroup; }
		
		//"start"
		public Keyword getStartKeyword_0() { return cStartKeyword_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//field = [FieldSpecification]
		public Assignment getFieldAssignment_2() { return cFieldAssignment_2; }
		
		//[FieldSpecification]
		public CrossReference getFieldFieldSpecificationCrossReference_2_0() { return cFieldFieldSpecificationCrossReference_2_0; }
		
		//ID
		public RuleCall getFieldFieldSpecificationIDTerminalRuleCall_2_0_1() { return cFieldFieldSpecificationIDTerminalRuleCall_2_0_1; }
	}
	public class AllowRestartMenuElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.uk.dzh.zpl.RaceGame.AllowRestartMenu");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAllowRestartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cAllowRestartMenuAction_1 = (Action)cGroup.eContents().get(1);
		
		//AllowRestartMenu:
		//    "allowRestart" {AllowRestartMenu}
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"allowRestart" {AllowRestartMenu}
		public Group getGroup() { return cGroup; }
		
		//"allowRestart"
		public Keyword getAllowRestartKeyword_0() { return cAllowRestartKeyword_0; }
		
		//{AllowRestartMenu}
		public Action getAllowRestartMenuAction_1() { return cAllowRestartMenuAction_1; }
	}
	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.uk.dzh.zpl.RaceGame.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAdditionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorPlusSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorHyphenMinusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Addition returns Expression:
		//    Multiplication ({Addition.left = current} operator+=("+"|"-") right+=Multiplication)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Multiplication ({Addition.left = current} operator+=("+"|"-") right+=Multiplication)*
		public Group getGroup() { return cGroup; }
		
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }
		
		//({Addition.left = current} operator+=("+"|"-") right+=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Addition.left = current}
		public Action getAdditionLeftAction_1_0() { return cAdditionLeftAction_1_0; }
		
		//operator+=("+"|"-")
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//("+"|"-")
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//"+"
		public Keyword getOperatorPlusSignKeyword_1_1_0_0() { return cOperatorPlusSignKeyword_1_1_0_0; }
		
		//"-"
		public Keyword getOperatorHyphenMinusKeyword_1_1_0_1() { return cOperatorHyphenMinusKeyword_1_1_0_1; }
		
		//right+=Multiplication
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_2_0() { return cRightMultiplicationParserRuleCall_1_2_0; }
	}
	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.uk.dzh.zpl.RaceGame.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplicationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorAsteriskKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorSolidusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Multiplication returns Expression:
		//    Primary ({Multiplication.left = current} operator+=("*"|"/") right+=Primary)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({Multiplication.left = current} operator+=("*"|"/") right+=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({Multiplication.left = current} operator+=("*"|"/") right+=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Multiplication.left = current}
		public Action getMultiplicationLeftAction_1_0() { return cMultiplicationLeftAction_1_0; }
		
		//operator+=("*"|"/")
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//("*"|"/")
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//"*"
		public Keyword getOperatorAsteriskKeyword_1_1_0_0() { return cOperatorAsteriskKeyword_1_1_0_0; }
		
		//"/"
		public Keyword getOperatorSolidusKeyword_1_1_0_1() { return cOperatorSolidusKeyword_1_1_0_1; }
		
		//right+=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.uk.dzh.zpl.RaceGame.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntVarExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRealLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cAdditionParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Primary returns Expression:
		//    IntLiteral |
		//    IntVarExpression |
		//    RealLiteral |
		//    "(" Addition ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//IntLiteral |
		//IntVarExpression |
		//RealLiteral |
		//"(" Addition ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntLiteral
		public RuleCall getIntLiteralParserRuleCall_0() { return cIntLiteralParserRuleCall_0; }
		
		//IntVarExpression
		public RuleCall getIntVarExpressionParserRuleCall_1() { return cIntVarExpressionParserRuleCall_1; }
		
		//RealLiteral
		public RuleCall getRealLiteralParserRuleCall_2() { return cRealLiteralParserRuleCall_2; }
		
		//"(" Addition ")"
		public Group getGroup_3() { return cGroup_3; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall_3_1() { return cAdditionParserRuleCall_3_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	public class IntVarExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.uk.dzh.zpl.RaceGame.IntVarExpression");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVarVariableDeclarationCrossReference_0 = (CrossReference)cVarAssignment.eContents().get(0);
		private final RuleCall cVarVariableDeclarationIDTerminalRuleCall_0_1 = (RuleCall)cVarVariableDeclarationCrossReference_0.eContents().get(1);
		
		//IntVarExpression:
		//    var = [VariableDeclaration]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//var = [VariableDeclaration]
		public Assignment getVarAssignment() { return cVarAssignment; }
		
		//[VariableDeclaration]
		public CrossReference getVarVariableDeclarationCrossReference_0() { return cVarVariableDeclarationCrossReference_0; }
		
		//ID
		public RuleCall getVarVariableDeclarationIDTerminalRuleCall_0_1() { return cVarVariableDeclarationIDTerminalRuleCall_0_1; }
	}
	public class IntLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.uk.dzh.zpl.RaceGame.IntLiteral");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//IntLiteral:
		//    val = INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//val = INT
		public Assignment getValAssignment() { return cValAssignment; }
		
		//INT
		public RuleCall getValINTTerminalRuleCall_0() { return cValINTTerminalRuleCall_0; }
	}
	public class RealLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.uk.dzh.zpl.RaceGame.RealLiteral");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValREALParserRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//RealLiteral:
		//    val = REAL
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//val = REAL
		public Assignment getValAssignment() { return cValAssignment; }
		
		//REAL
		public RuleCall getValREALParserRuleCall_0() { return cValREALParserRuleCall_0; }
	}
	public class REALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.uk.dzh.zpl.RaceGame.REAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//REAL returns ecore::EFloat hidden():
		//    INT? "." INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//INT? "." INT
		public Group getGroup() { return cGroup; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	
	
	private final RaceGameElements pRaceGame;
	private final VariableDeclarationElements pVariableDeclaration;
	private final EndGameBehaviourElements pEndGameBehaviour;
	private final ScreenSpecificationElements pScreenSpecification;
	private final ObstaclepecificationElements pObstaclepecification;
	private final ObstacleMemberElements pObstacleMember;
	private final WaterObstacleElements pWaterObstacle;
	private final WallObstacleElements pWallObstacle;
	private final FieldSpecificationElements pFieldSpecification;
	private final OptionSpecificationElements pOptionSpecification;
	private final SuperModeDeclarationElements pSuperModeDeclaration;
	private final StartFieldDeclarationElements pStartFieldDeclaration;
	private final AllowRestartMenuElements pAllowRestartMenu;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final PrimaryElements pPrimary;
	private final IntVarExpressionElements pIntVarExpression;
	private final IntLiteralElements pIntLiteral;
	private final RealLiteralElements pRealLiteral;
	private final REALElements pREAL;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RaceGameGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRaceGame = new RaceGameElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pEndGameBehaviour = new EndGameBehaviourElements();
		this.pScreenSpecification = new ScreenSpecificationElements();
		this.pObstaclepecification = new ObstaclepecificationElements();
		this.pObstacleMember = new ObstacleMemberElements();
		this.pWaterObstacle = new WaterObstacleElements();
		this.pWallObstacle = new WallObstacleElements();
		this.pFieldSpecification = new FieldSpecificationElements();
		this.pOptionSpecification = new OptionSpecificationElements();
		this.pSuperModeDeclaration = new SuperModeDeclarationElements();
		this.pStartFieldDeclaration = new StartFieldDeclarationElements();
		this.pAllowRestartMenu = new AllowRestartMenuElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pPrimary = new PrimaryElements();
		this.pIntVarExpression = new IntVarExpressionElements();
		this.pIntLiteral = new IntLiteralElements();
		this.pRealLiteral = new RealLiteralElements();
		this.pREAL = new REALElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("kcl.uk.dzh.zpl.RaceGame".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//RaceGame :
	//    "game" name=ID "{"
	//        variable +=VariableDeclaration?
	//        screen = ScreenSpecification
	//        fields += FieldSpecification+
	//        options += OptionSpecification+
	//    "}"
	//;
	public RaceGameElements getRaceGameAccess() {
		return pRaceGame;
	}
	
	public ParserRule getRaceGameRule() {
		return getRaceGameAccess().getRule();
	}
	
	//VariableDeclaration:
	//    "var" name=ID "=" value=INT
	//;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//EndGameBehaviour :
	//    "end-game" "(" win=STRING "," lost=STRING ")"
	//;
	public EndGameBehaviourElements getEndGameBehaviourAccess() {
		return pEndGameBehaviour;
	}
	
	public ParserRule getEndGameBehaviourRule() {
		return getEndGameBehaviourAccess().getRule();
	}
	
	//ScreenSpecification :
	//    "screen" name=ID "{"
	//        "Width" "=" screenWidth = INT
	//        "Height" "=" screenHeight= INT
	//    "}"
	//;
	public ScreenSpecificationElements getScreenSpecificationAccess() {
		return pScreenSpecification;
	}
	
	public ParserRule getScreenSpecificationRule() {
		return getScreenSpecificationAccess().getRule();
	}
	
	//Obstaclepecification:
	//     "obstacle" name=ID "{"
	//         fields += ObstacleMember*
	//     "}"
	//;
	public ObstaclepecificationElements getObstaclepecificationAccess() {
		return pObstaclepecification;
	}
	
	public ParserRule getObstaclepecificationRule() {
		return getObstaclepecificationAccess().getRule();
	}
	
	//ObstacleMember:
	//    WallObstacle|
	//    WaterObstacle
	//;
	public ObstacleMemberElements getObstacleMemberAccess() {
		return pObstacleMember;
	}
	
	public ParserRule getObstacleMemberRule() {
		return getObstacleMemberAccess().getRule();
	}
	
	//WaterObstacle:
	//    "water" name=ID "{"
	//    "}"
	//;
	public WaterObstacleElements getWaterObstacleAccess() {
		return pWaterObstacle;
	}
	
	public ParserRule getWaterObstacleRule() {
		return getWaterObstacleAccess().getRule();
	}
	
	//WallObstacle:
	//    "space" name=ID "{"
	//        "spaceWidth" "=" wallWidth=INT
	//        "spaceHeight" "=" wallHeight=INT
	//        "spacePosX" "=" wallPosX=INT
	//        "spacePosY" "=" wallPosY=INT
	//    "}"
	//;
	public WallObstacleElements getWallObstacleAccess() {
		return pWallObstacle;
	}
	
	public ParserRule getWallObstacleRule() {
		return getWallObstacleAccess().getRule();
	}
	
	//FieldSpecification :
	//    "field" name=ID "{"
	//        "enemyCount" "=" enemyCount=Addition
	//         obstacle = Obstaclepecification
	//         "nextLevel" "goto"  nextLevel = [FieldSpecification]
	//    "}"
	//;
	public FieldSpecificationElements getFieldSpecificationAccess() {
		return pFieldSpecification;
	}
	
	public ParserRule getFieldSpecificationRule() {
		return getFieldSpecificationAccess().getRule();
	}
	
	//OptionSpecification :
	//    StartFieldDeclaration |
	//    AllowRestartMenu|
	//    SuperModeDeclaration |
	//    EndGameBehaviour
	//;
	public OptionSpecificationElements getOptionSpecificationAccess() {
		return pOptionSpecification;
	}
	
	public ParserRule getOptionSpecificationRule() {
		return getOptionSpecificationAccess().getRule();
	}
	
	//SuperModeDeclaration:
	//    "superMode" {SuperModeDeclaration}
	//;
	public SuperModeDeclarationElements getSuperModeDeclarationAccess() {
		return pSuperModeDeclaration;
	}
	
	public ParserRule getSuperModeDeclarationRule() {
		return getSuperModeDeclarationAccess().getRule();
	}
	
	//StartFieldDeclaration:
	//    "start" "=" field = [FieldSpecification]
	//;
	public StartFieldDeclarationElements getStartFieldDeclarationAccess() {
		return pStartFieldDeclaration;
	}
	
	public ParserRule getStartFieldDeclarationRule() {
		return getStartFieldDeclarationAccess().getRule();
	}
	
	//AllowRestartMenu:
	//    "allowRestart" {AllowRestartMenu}
	//;
	public AllowRestartMenuElements getAllowRestartMenuAccess() {
		return pAllowRestartMenu;
	}
	
	public ParserRule getAllowRestartMenuRule() {
		return getAllowRestartMenuAccess().getRule();
	}
	
	//Addition returns Expression:
	//    Multiplication ({Addition.left = current} operator+=("+"|"-") right+=Multiplication)*
	//;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	//Multiplication returns Expression:
	//    Primary ({Multiplication.left = current} operator+=("*"|"/") right+=Primary)*
	//;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//Primary returns Expression:
	//    IntLiteral |
	//    IntVarExpression |
	//    RealLiteral |
	//    "(" Addition ")"
	//;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//IntVarExpression:
	//    var = [VariableDeclaration]
	//;
	public IntVarExpressionElements getIntVarExpressionAccess() {
		return pIntVarExpression;
	}
	
	public ParserRule getIntVarExpressionRule() {
		return getIntVarExpressionAccess().getRule();
	}
	
	//IntLiteral:
	//    val = INT
	//;
	public IntLiteralElements getIntLiteralAccess() {
		return pIntLiteral;
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}
	
	//RealLiteral:
	//    val = REAL
	//;
	public RealLiteralElements getRealLiteralAccess() {
		return pRealLiteral;
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}
	
	//REAL returns ecore::EFloat hidden():
	//    INT? "." INT
	//;
	public REALElements getREALAccess() {
		return pREAL;
	}
	
	public ParserRule getREALRule() {
		return getREALAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
